
const int sensorPin = A7;    // select the input pin for the potentiometer
const int ledPin = 13;      // select the pin for the LED

const int Mux_En_Pin[]={14,15,16,17,18,19, 22,23,24,25,26,27,28,29,30,31,32,33,34};
const int Input_Mux_Switch_Pin[]={53,52,2,3};
const int Output_Mux_Switch_Pin[]={4,5,6,7};
const int Sel_Res_Mux_Switch_Pin[]={8,9,10,11};
//const int Sel_Res[]={2.2, 20, 2000, 20000, 200000, 2000000};
const long Sel_Res[]={20, 200, 2000, 20000, 200000, 2000000};
float Sens_Res[]={0,0,0,0,0,0};

#define Mux_Enable_Res_Pin 34
#define Target_ADC_Pin A0
#define LED_OKNG_Pin 13

int raw= 0;
float Vin= 5.11;
float Vout= 0;
float buffer= 0;

void fmux_sel(int i, int j);
double fmeasure_res();
void fPin_Init();

void setup() {
  Serial.begin(9600);
  
  for(int i=0; i<18; i++){
    pinMode(Mux_En_Pin[i], OUTPUT);}
  for(int i=0; i<4; i++){
    pinMode(Input_Mux_Switch_Pin[i], OUTPUT);}
  for(int i=0; i<4; i++){
    pinMode(Output_Mux_Switch_Pin[i], OUTPUT);}
  for(int i=0; i<4; i++){
    pinMode(Sel_Res_Mux_Switch_Pin[i], OUTPUT);}
    
  pinMode(Mux_Enable_Res_Pin, OUTPUT);
  pinMode(Target_ADC_Pin, INPUT);
  pinMode(LED_OKNG_Pin, OUTPUT);
  fPin_Init();
  digitalWrite(Mux_En_Pin[18], HIGH);
}

void loop() {
  
  Serial.println("SAP TP 접속 성능 평가");
  double measure_res = 0;

//  for(int i=0; i<3; i++)
  for(int i=0; i<1; i++)
  {
//    for(int j=0; j<48; j++)
    for(int j=0; j<6; j++)
    {
      fmux_sel(i,j);
      Serial.print("\t");
      Serial.print("CntNo : ");
      Serial.print(i+1);
      Serial.print(", ");
      
      Serial.print("\t");
      Serial.print("lineNo : ");
      Serial.print(j+1);
      Serial.print(", ");
    
      delay(100);   
      fmeasure_res();   
      delay(100);   
    }
  }
//  digitalWrite(LED_OKNG_Pin, HIGH);
}

void fmux_sel(int i, int j)  // i 컨넥터번호, j는 핀번호
{
  // 컨넥터 별로 먹스 6개 + 16으로 나누면 mux 번호임.
  digitalWrite(Mux_En_Pin[6*i+(j>>4)], HIGH);   //입력 mux enable pin
  digitalWrite(Mux_En_Pin[6*i+5-(j>>4)], HIGH);  //출력 mux enable pin

  // 입력 mux를 비트연산으로 스위치 4개 선택
  digitalWrite(Input_Mux_Switch_Pin[0], j & 0b0001);
  digitalWrite(Input_Mux_Switch_Pin[1], j & 0b0010);
  digitalWrite(Input_Mux_Switch_Pin[2], j & 0b0100);
  digitalWrite(Input_Mux_Switch_Pin[3], j & 0b1000);
  
  // 비트연산으로 스위치 4개 선택, 출력 스위치는 "15-입력핀번호"로 계산
  digitalWrite(Output_Mux_Switch_Pin[0], (15-(j&0b1111)) & 0b0001);
  digitalWrite(Output_Mux_Switch_Pin[1], (15-(j&0b1111)) & 0b0010);
  digitalWrite(Output_Mux_Switch_Pin[2], (15-(j&0b1111)) & 0b0100);
  digitalWrite(Output_Mux_Switch_Pin[3], (15-(j&0b1111)) & 0b1000);

  return;
}

double fmeasure_res()
{
  double estimatedRes = 0;
  
  for(int i=10; i<16; i++)
  {
    digitalWrite(Sel_Res_Mux_Switch_Pin[0], i & 0b0001);
    digitalWrite(Sel_Res_Mux_Switch_Pin[1], i & 0b0010);
    digitalWrite(Sel_Res_Mux_Switch_Pin[2], i & 0b0100);
    digitalWrite(Sel_Res_Mux_Switch_Pin[3], i & 0b1000);
    
    delay(Sel_Res[i-10]/300 + 200);  // 스위칭 후 전압안정화 시간 필요
    
    int temp = analogRead(A0);
    
    buffer= temp * Vin;
    Vout= (buffer)/1024.0;
    buffer= Vin/Vout;
    Sens_Res[i-10]= Sel_Res[i-10] * (buffer-1) + buffer * 9.5 - 28.5;
    
    if ( (Sens_Res[i-10] > (Sel_Res[i-10]*36.4/200) ) && (Sens_Res[i-10] < (Sel_Res[i-10]*36.4/20)) ){
      Serial.print(Sel_Res[i-10]);
      Serial.print(",   ");
      Serial.print("\t");
      Serial.println(Sens_Res[i-10], 0);
      return Sens_Res[i-10];
    }
  }
  if (Sens_Res[0] < 5) {
    Serial.println("short");
    return 0;
  }
  else if (Sens_Res[5] > 3000000) {
    Serial.println("open");
    return 1;
  }
  Serial.println("fail");
  return 2;
//    Serial.print("\t");
//    for(int i=0; i<6; i++){
//          Serial.print(Sens_Res[i], 0);
//          Serial.print(",       ");
//    }
//    
//  Serial.println();
//  return;
}

void fPin_Init()
{  
  for(int i=0; i<17; i++){
    digitalWrite(Mux_En_Pin[i], LOW);}
  for(int i=0; i<5; i++){
    digitalWrite(Input_Mux_Switch_Pin[i], LOW);}
  for(int i=0; i<4; i++){
    digitalWrite(Output_Mux_Switch_Pin[i], LOW);}
  for(int i=0; i<4; i++){
    digitalWrite(Sel_Res_Mux_Switch_Pin[i], LOW);}
  digitalWrite(Mux_Enable_Res_Pin, LOW);
  digitalWrite(LED_OKNG_Pin, LOW);
}
